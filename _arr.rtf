{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset204 Courier New;}{\f1\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sl240\slmult1\qj\f0\fs22\lang1049\par
\f1\lang1033\par
\b\i\fs48 _arr\b0\i0  \i\fs32 v2.8 ( 31 Mar 2021 )\i0\fs22\par
\par
\b __________________________________________________________________\par
\b0\f0\lang1049\par
\b\f1\fs26\lang1033 OVERVIEW\par
\par
\b0\fs18\tab this is docunetation file for gawk's library \b _arr.mod\b0 .\par
\par
\tab the library is the simple include file that is not requiring any initializations. please \tab @include "_arr.mod" at any point of your's gawk projects.\par
\par
\tab library provides 3 main functions that is allowing to join the number of incremental \tab numeric indexed elements of an arrays:\par
\par
\tab\tab _reta( A )\tab\tab\tab\tab # join elements\f0\lang1049  \f1\lang1033 of an array `A\par
\par
\tab\tab _retas( A, "sep" )\tab\tab\tab # join elements\f0\lang1049  \f1\lang1033 of an array `A with separator\par
\par
\tab\tab _retab( A, B )\tab\tab\tab # join element-pairs of the two arrays\par
\par
\tab the functions have perfect performance that is allowing to join mega-indexes of the \tab different size elements in about a few ms. the exact performance metering is reported at \tab the PERFOMANCE part of this documentation.\par
\par
\tab additionally library provides 4 functions that is very useful for working with an arrays \tab in gawk:\par
\par
\tab\tab _defa( \i index\i0 , \i ARRAY\i0  )\tab\tab # define empty subarray at `\i ARRAY\i0 [ `\i index\i0  ]\par
\par
\tab\tab _leta( \i index\i0 , \i ARRAY\i0  )\tab\tab # define subarray at `\i ARRAY\i0 [ `\i index\i0  ]\par
\par
\tab\tab _dela( \i ARRAY\i0  )\tab\tab\tab # delete all elements of an `\i ARRAY\i0\par
\par
\tab\tab _movaa( \i DSTARRAY\i0 , \i SRCARRAY\i0  )\tab # copy all elements of `\i SRCARRAY\i0  to `\i DSTARRAY\i0\par
\b\par
\fs22 _____________________________________________________________\par
\fs26\par
HOW TO USE\b0\f0\fs22\lang1049\par
\f1\lang1033\par
\fs18\tab just @include "_arr.mod" in your's gawk project.\fs22\par
\par
\b _____________________________________________________________\par
\b0\par
\b _reta\b0 ( \i A\i0 , \i start\i0 , \i length\i0  )\par
\fs18\par
\tab return `\i length\i0  incremental numeric indexed elements of the array `\i A\i0  starting from index \tab `\i start\i0 :\par
\par
\fs16\tab\tab example:\par
\par
\tab\tab\tab split( "ABCDEF", A, "" )\par
\par
\tab\tab\tab # A[ 1 ] =\tab A\par
\tab\tab\tab # A[ 2 ] =\tab B\par
\tab\tab\tab # A[ 3 ] =\tab C\par
\tab\tab\tab # A[ 4 ] =\tab D\par
\tab\tab\tab # A[ 5 ] =\tab E\par
\tab\tab\tab # A[ 6 ] =\tab F\par
\par
\tab\tab\tab print _reta( A, 2, 3 )\tab\tab # equivalent to: print A[ 2 ] A[ 3 ] A[ 4 ]\par
\par
\tab\tab output:\par
\par
\tab\tab\tab BCD\par
\fs18\par
\tab for details about parameters `\i start\i0  and `\i length\i0  please see \i _reta()/_retas()/_retab() start \tab and length detections\i0 .\par
\par
\par
\tab function call parameter's variations:\par
\par

\pard\li720\sl240\slmult1\qj\fs16\tab _reta( \i A\i0 , \i start\i0 , \i length\i0  )\tab\tab full form\par
\par
\tab _reta( \i A\i0 , \i start\i0  )\tab\tab\tab\i length\i0  autodetection*\par
\par
\tab\tab\tab\tab\tab\tab\tab from \i start\i0  until the last one\par
\par
\tab _reta( \i A\i0 , \i ""\i0 , \i length\i0  )\tab\tab\tab\i start\i0  autodetection\par
\par
\tab\tab\tab\tab\tab\tab\tab if index 0 is exist then start index = 0\par
\tab\tab\tab\tab\tab\tab\tab otherwise start index = 1\par
\par
\tab _reta( \i A\i0  )\tab\tab\tab\tab\i start\i0  and \i length\i0  autodetection ( return all )\par
\par
\tab\tab\tab\tab\tab\tab\tab perform \i start\i0  autodetection as described above\par
\tab\par
\tab\tab\tab\tab\tab\tab\tab perform \i length\i0  autodetection as described above\par

\pard\sl240\slmult1\qj\fs22\par
\b _______________________________________________________\par
\b0\par
\b _retas\b0 ( \i A\i0 , \i sep\i0 , \i start\i0 , \i length\i0  )\fs18\par
\par
\tab return `\i length\i0  incremental numeric indexed elements of the array `\i A\i0  starting from index \tab `\i start \i0 with the separator string `\i sep\i0  inserted between each two returned elements:\par
\par
\fs16\tab\tab example:\par
\par
\tab\tab\tab split( "ABCDEF", A, "" )\par
\par
\tab\tab\tab # A[ 1 ] =\tab A\par
\tab\tab\tab # A[ 2 ] =\tab B\par
\tab\tab\tab # A[ 3 ] =\tab C\par
\tab\tab\tab # A[ 4 ] =\tab D\par
\tab\tab\tab # A[ 5 ] =\tab E\par
\tab\tab\tab # A[ 6 ] =\tab F\par
\par
\tab\tab\tab print _retas( A, "-", 2, 3 )\tab\tab # equivalent to:\par
\tab\tab\tab\tab\tab\tab\tab\tab # print A[ 2 ] "-" A[ 3 ] "-" A[ 4 ]\par
\par
\tab\tab output:\par
\par
\tab\tab\tab B-C-D\par
\fs18\par
\tab for details about parameters `\i start\i0  and `\i length\i0  please see \i _reta()/_retas()/_retab() start \tab and length detections\i0 .\par
\par
\tab note that if `\i sep\i0  equals to empty string then _retas() will call _reta() function with the \tab same given `\i start\i0  and `\i length\i0  parameters.\par
\par
\par
\tab function call parameter's variations:\par
\par

\pard\li720\sl240\slmult1\qj\fs16\tab _retas( \i A\i0 , \i sep\i0 , \i start\i0 , \i length\i0  )\tab full form\par
\par
\tab _retas( \i A\i0  )\tab\tab\tab\tab empty separator cause recall _reta( A )\par
\tab _retas( \i A\i0 , \i ""\i0 , \i ...\i0  )\tab\tab\tab empty separator cause recall _reta( A, ... )\par
\par
\tab _retas( \i A\i0 , \i sep\i0 , \i start\i0  )\tab\tab\i length\i0  autodetection*\par
\par
\tab\tab\tab\tab\tab\tab\tab from \i start\i0  until the last one\par
\par
\tab _retas( \i A\i0 , \i sep\i0 , \i ""\i0 , \i length\i0  )\tab\tab\i start\i0  autodetection\par
\par
\tab\tab\tab\tab\tab\tab\tab if index 0 is exist then start index = 0\par
\tab\tab\tab\tab\tab\tab\tab otherwise start index = 1\par
\par
\tab _retas( \i A\i0 , \i sep\i0  )\tab\tab\tab\i length\i0  and \i start\i0  autodetection ( return all )\par
\par
\tab\tab\tab\tab\tab\tab\tab perform start autodetection as described above\par
\tab\par
\tab\tab\tab\tab\tab\tab\tab perform length autodetection as described above\par
\par

\pard\sl240\slmult1\qj\b\fs22 _______________________________________________________\b0\fs18\par
\fs22\par
\b _retab\b0 ( \i A\i0 , B, \i starta\i0 , \i length, startb\i0  )\fs18\par
\par
\tab return `\i length\i0  incremental numeric indexed element-pairs of an arrays `\i A\i0  and `B starting \tab from index `\i starta\i0  for an array `\i A\i0  and from index `\i startb\i0  for an array `\i B\i0 :\par
\par
\fs16\tab\tab example:\par
\par
\tab\tab\tab patsplit( "0a1b2c3d4e5f6", A, /[a-z]/, B )\par
\par
\tab\tab\tab # idx\tab  A  \tab   B\par
\tab\tab\tab #\par
\tab\tab\tab # 0\tab\tab   0\par
\tab\tab\tab # 1\tab  a\tab   1\par
\tab\tab\tab # 2\tab  b\tab   2\par
\tab\tab\tab # 3\tab  c\tab   3\par
\tab\tab\tab # 4\tab  d\tab   4\par
\tab\tab\tab # 5\tab  e\tab   5\par
\tab\tab\tab # 6\tab  f\tab   6\par
\tab   \par
\tab\tab\tab print _retab( A, B, 2, 2, 4)\tab\tab # equivalent to:\par
\tab\tab\tab\tab\tab\tab\tab\tab # print A[ 2 ] B[ 4 ] A[ 3 ] B[ 5 ]\par
\par
\tab\tab output:\par
\par
\tab\tab\tab b4c5\par
\fs18\par
\tab typically this function is mostly useful as the opposite of the built-ins split/patsplit \tab functions that are called with four arguments passed in:\par
\par
\tab\tab example:\par
\par
\fs16\tab\tab\tab patsplit( "A-B-C-D-E-F", A, /-/, B )\par
\par
\tab\tab\tab # idx\tab  A  \tab   B\par
\tab\tab\tab #\par
\tab\tab\tab # 0\tab\tab   A\par
\tab\tab\tab # 1\tab  -\tab   B\par
\tab\tab\tab # 2\tab  -\tab   C\par
\tab\tab\tab # 3\tab  -\tab   D\par
\tab\tab\tab # 4\tab  -\tab   E\par
\tab\tab\tab # 5\tab  -\tab   F\par
\par
\tab\tab\tab print _retab( A, B )\tab\tab\tab # return all (special case: A[ 0 ] created)\par
\par
\tab\tab output:\par
\par
\tab\tab\tab A-B-C-D-E-F\par
\fs18\par
\tab note that if parameter `\i length\i0  is autodetected then its based on the array `\i A\i0  and it's \tab start \tab pointer `\i starta\i0 .\par
\par
\tab _retab() performs parameters determination by the following:\par
\par
\tab\tab `\i startb\i0  detection for array `\i B\i0\par
\par
\tab\tab `\i starta\i0  detection for array `\i A\i0\par
\par
\tab\tab `\i length\i0  detection based on the array `\i A\i0  and it's start index in `\i starta\i0\par
\par
\tab\tab the special case is in if both `\i starta\i0  and `\i startb\i0  are omitted ( == "" ). the case \tab\tab is required for the _retab's "as the split()/patsplit() opposite" role's:\par
\par
\tab\tab\tab if `\i length\i0  is also omiited:\tab\tab # _retab( A, B )\par
\par
\tab\tab\tab\tab if `\i starta\i0  < `\i startb\i0 :\par
\par
\tab\tab\tab\tab\tab `\i startb\i0  = `\i starta\i0\tab\tab # A[ 0 ]\tab   \tab => A[ 0 ] B[ 0 ]\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab # A[ 1 ] B[ 1 ]\tab    A[ 1 ] B[ 1 ]\par
\par
\tab\tab\tab if `\i startb\i0  < `\i starta\i0 :\par
\par
\tab\tab\tab\tab `\i starta\i0  = `\i startb\i0\tab\tab\tab #\tab   B[ 0 ]\tab => A[ 0 ] B[ 0 ]\par
\tab\tab\tab\tab\tab\tab\tab\tab\tab # A[ 1 ] B[ 1 ]\tab    A[ 1 ] B[ 1 ]\par
\tab\tab\tab\tab ++`\i length\i0\par
\par
\par
\tab for details about parameters `\i starta\i0 , \i `startb\i0  and `\i length\i0  please see \i _reta()/_retas()/\tab _retab() start and length detections\i0 .\par
\par
\par
\tab function call parametric variations:\par
\par
\fs22\tab\tab\fs16 _retab( A, B, starta, length, startb )\tab full form\par
\par
\tab\tab _retab( A, B )\par
\par
\tab\tab ...\tab\tab\tab\tab\tab\par
\fs22\par
\b _______________________________________________________\par
\b0\par
\b _reta\b0 () / \b _retas\b0 () / \b _retab\b0 () \i start\i0  and \i length\i0  detections\par
\par
\fs18\tab function set provides flexible parameter's `\i start\i0  and `\i length\i0  configuration. it's may have \tab direct or indirect (negative: counting from the end) forms or just may be omitted ( == \tab "" ) to detect is automatically.\par
\par
\tab `\i start\i0  determination:\par
\par
\tab\tab the `\i start\i0  parameter specifies the starting index of the array's first join \tab\tab\tab element:\par
\par
\fs16\tab\tab\tab example:\par
\par
\tab\tab\tab\tab split( "ABCDEF", A, "" )\par
\par

\pard\li720\sl240\slmult1\qj\tab\tab\tab # A[ 1 ] =\tab A\par
\tab\tab\tab # A[ 2 ] =\tab B\par
\tab\tab\tab # A[ 3 ] =\tab C\par
\tab\tab\tab # A[ 4 ] =\tab D\par
\tab\tab\tab # A[ 5 ] =\tab E\par
\tab\tab\tab # A[ 6 ] =\tab F\par

\pard\sl240\slmult1\qj\par
\tab\tab\tab\tab print _reta( A, 2, 3 )\tab\tab # 3 elements starting from index 2\par
\par
\tab\tab\tab output:\par
\par
\tab\tab\tab\tab BCD\par
\fs18\par
\tab\tab the `\i start\i0  parameter may be omitted ( == "" ), in this case the starting index will \tab\tab be determinated automatically and will be equal to: 0 or 1 - depending on whether \tab\tab index 0 exists in the array `\i A\i0  or not. it is calculated by the following:\par
\par
\fs16\tab\tab\tab `\i start\i0  =! ( 0 in \i A\i0  )\fs18\par
\par
\tab\tab if `\i start\i0  parameter is not omitted ( != "" ) then it's will be used as the exact \tab\tab index of the first joined element of an array wherever from it's type and value.\par
\par
\tab `\i length\i0  determination:\par
\par
\tab\tab The `\i length\i0  parameter determinates the number of the elements of the array `\i A\i0  (or \tab\tab in case \b _retab\b0 (): the number of element-pairs of the arrays `\i A\i0  and `\i B\i0  ) that are \tab\tab should be joined together:\par
\par

\pard\li720\sl240\slmult1\qj\fs16\tab\tab\tab ... = _reta( A, 2, 3 )\par
\par
\tab\tab is equivalent to:\par
\par
\tab\tab\tab ... = A[ 2 ] A[ 3 ] A[ 4 ]\par

\pard\sl240\slmult1\qj\fs18\par
\tab\tab The `\i length\i0  parameter may be omitted ( == "" ). in this case the number of the \tab\tab\tab elements that are should to be joined to - will be detected automatically for \tab\tab\tab returning all the rest of the array's elements starting from the index determinated \tab\tab in the previous step until the last incremental numeric indexed element in the \tab\tab\tab array. it is calculated by the following:\par
\par
\fs16\tab\tab\tab `\i length\i0  = length( `A ) - start + ! ( 0 in A )\fs18\par
\par
\tab\tab note that automatic `\i length\i0  detection is based on the assumption that the array `\i A\i0  \tab\tab has no other indices other than incremental numeric indexed.\par
\par
\tab\tab The `\i length\i0  parameter can also be an negative number. if the `\i length\i0  parameter is \tab\tab less than zero ( < 0 ) then it's indicates the number of the elements from the end \tab\tab that should NOT to be joined.\par
\par
\tab\tab for example: if `\i length\i0  == -1 then it's means to join all the rest of the elements \tab\tab of the array `\i A\i0  - except the last one. if `\i length\i0  == -2 - then except last two and \tab\tab so on.\par
\par
\fs16\tab\tab\tab example:\par
\par
\tab\tab\tab\tab split( "ABCDEF", A, "" )\par
\par

\pard\li720\sl240\slmult1\qj\tab\tab\tab # A[ 1 ] =\tab A\par
\tab\tab\tab # A[ 2 ] =\tab B\par
\tab\tab\tab # A[ 3 ] =\tab C\par
\tab\tab\tab # A[ 4 ] =\tab D\par
\tab\tab\tab # A[ 5 ] =\tab E\par
\tab\tab\tab # A[ 6 ] =\tab F\par

\pard\sl240\slmult1\qj\par
\tab\tab\tab\tab print _reta ( A, 2, -3 )\par
\par
\tab\tab\tab output:\par
\par
\tab\tab\tab\tab BC\par
\par
\b\fs22 _____________________________________________________________\b0\fs18\par
\fs22\par
\b _defa\b0 ( \i index\i0 , \i ARRAY \i0 )\fs18\par
\par
\tab create clear subarray at `\i ARRAY\i0 [ `\i index\i0  ].\par
\par
\tab if `\i index\i0  is exist in `\i ARRAY\i0  then:\par
\par
\tab\tab if `\i ARRAY\i0 [ `\i index\i0  ] is an array then:\par
\par
\tab\tab\tab delete all elements of the `\i ARRAY\i0 [ `\i index\i0  ] ( from inside: by \b _dela\b0 () )\par
\par
\tab\tab else\tab delete `\i index\i0  from `\i ARRAY\i0  and recreate its as an subarray\par
\par
\tab else\tab create `\i index\i0  in `\i ARRAY\i0  as an subarray\par
\par
\tab function returns `\i index\i0 .\par
\fs22\par
\fs16\tab\tab example:\par
\par
\tab\tab\tab # create empty subarray at \i A\i0 [ "\i abc\i0 " ] and providing it as the second \tab\tab\tab\tab\tab # parameter of the built-in split() function:\par
\par
\tab\tab\tab split( ..., \i A\i0 [ \b _defa\b0 ( "\i abc\i0 ", \i A\i0  ) ], ... )\par
\par
\b\fs22 _____________________________________________________________\b0\fs18\par
\fs22\par
\b _leta\b0 ( \i index\i0 , \i ARRAY \i0 )\fs18\par
\par
\tab define subarray at `\i ARRAY\i0 [ `\i index\i0  ] in case if it's not already defined as an array.\par
\par
\tab\b _leta\b0 () is the same as \b _defa\b0 () except that \b _leta\b0 () do not deletes the content of subarray \tab if it's already defined at `\i ARRAY\i0 [ `\i index\i0  ]\par
\par
\tab if `\i index\i0  is exist in `\i ARRAY\i0 :\par
\par
\tab\tab if `\i ARRAY\i0 [ `\i index\i0  ] is an subarray then no action performed\par
\par
\tab\tab if `\i ARRAY\i0 [ `\i index\i0  ] is not an array then delete `\i index\i0  in `\i ARRAY\i0  and\par
\tab\tab recreate its as an subarray\par
\par
\tab else\tab create `\i index\i0  in `\i ARRAY\i0  as an subarray\par
\par
\tab function returns `\i index\i0 .\par
\fs16\par
\b\fs22 _____________________________________________________________\b0\fs18\par
\fs22\par
\b _dela\b0 ( \i ARRAY\i0 , \i value \i0 )\fs18\par
\par
\tab function performs: delete `\i ARRAY\i0  and return `\i value\i0 .\par
\fs16\par
\b\fs22 _____________________________________________________________\b0\fs18\par
\fs22\par
\b _movaa\b0 ( \i DSTARRAY\i0 , \i SRCARRAY, LSTARRAY \i0 )\fs18\par
\par
\tab copy content of the source array `\i SRCARRAY\i0  into destination array `\i DSTARRAY\i0 .\par
\par
\par
\tab note that no data will be writed/redefined in the `\i DSTARRAY\i0  except indexes existing in \tab `\i SRCARRAY\i0 .\par
\b\fs22 __________________________________________________________________\b0\f0\lang1049\par
\f1\lang1033\par
\b\fs26 PERFORMANCE\b0\f0\fs22\lang1049\par
\f1\lang1033\par
\fs18\tab performance testing wasn't accurate\f0\lang1049  (\f1\lang1033 no realtime\f0\lang1049  \f1\lang1033 priority/no core affinity).\par
\par
\tab the performance metering data available in the table below.\par
\par
\tab first column \b index\b0  contains the number of the joined elements in the test array.\par
\par
\tab second column \b elements\b0  contains the lengths of an four indexes that is filling\par
\tab test array repeatly. for example: 1/8/16/64 means that the test array\par
\tab is filled by:\par
\fs16\par
\tab\tab A[ 1 ] = 1 byte lenght string\par
\tab\tab A[ 2 ] = 8 bytes lenght string\par
\tab\tab A[ 3 ] = 16 bytes lenght string\par
\tab\tab A[ 4 ] = 64 bytes lenght string\par
\par
\tab\tab A[ 5 ] = 1 byte lenght string\par
\tab\tab A[ 6 ] = 8 bytes lenght string\par
\tab\tab ...\par
\fs18\par
\tab third column \b data\b0  shows the total amount of data that is joined.\par
\par
\tab fourth column \b classic\b0  shows the timing of joining using classic gawk way\par
\par
\tab\f0\lang1049 the usual accumulation of \f1\lang1033 the \f0\lang1049 elements in a variable is meant as a classic\f1\lang1033  \f0\lang1049 test\f1\lang1033 :\par
\par
\tab\tab q = start + len\par
\par
\tab\tab for ( i = start; i < q; i++ )\par
\par
\tab\tab\tab t = t A[ i ]\par
\par
\tab\tab # t is the result\par
\par
\tab fifth column \b retair\b0  shows timings for joining array elements using retair\par
\tab method - by the calling _reta() function\par
\par
\tab sixth column \b times faster\b0  is showing the number of times retair faster than a classic \tab way ;\f0\lang1049 )\f1\lang1033\par
\fs24\par
\b\fs16\tab index\tab elements\tab\tab data\tab\tab classic\tab\tab retair\tab\tab times faster\par
\b0\fs24\par
\fs16\tab 10K\tab 1/1/1/1\tab\tab\f0\lang1049\tab\f1\lang1033 10K\tab\tab 2.400 ms\tab 799.8 us\tab x 3.00\par
\par
\tab 100K\tab 1/1/1/1\tab\tab\f0\lang1049\tab\f1\lang1033 100K\tab\tab 24.80 ms\tab 10.40 ms\tab x 2.38\par
\par
\tab 1M\tab 1/1/1/1\tab\tab\f0\lang1049\tab\f1\lang1033 1M\tab\tab 290.4 ms\tab 103.2 ms\tab x 2.81\par
\par
\tab 10K\tab 1/8/32/128\tab\tab 422.50K\f0\lang1049\tab\f1\lang1033\tab 4.001 ms\tab 1.600 ms\tab x 2.50\par
\par
\tab 100K\tab 1/8/32/128\tab\tab 4.22M\tab\tab 1.118 s\tab\tab 17.60 ms\tab x 63.5\par
\par
\tab 200K\tab 1/8/32/128\tab\tab 8.45M\tab\tab 4.321 s\tab\tab 35.21 ms\tab x 122\par
\par
\tab 400K\tab 1/8/32/128\tab\tab 16.90M\tab\tab 17.23 s\tab\tab 76.82 ms\tab x 224\par
\par
\tab 1K\tab 1/1024/4096/16384\tab 5.37M\tab\tab 720.9 ms\tab 5.602 ms\tab x 128\par
\par
\tab 5K\tab 1/1024/4096/16384\tab 26.88M\tab\tab 19.00 s\tab\tab 40.80 ms\tab x 465\par
\par
\tab 20K\tab 1/256/512/1024\f0\lang1049\tab\f1\lang1033\tab 8.96M\tab\f0\lang1049\tab\f1\lang1033 4.778 s\tab\tab 16.98 ms\tab x 281.2\par
\par
\tab 50K\tab 1/256/512/1024\tab\f0\lang1049\tab\f1\lang1033 22.41M\tab\f0\lang1049\tab\f1\lang1033 30.20 s\tab\tab 40.97 ms\tab x 737.2\par
\par
\tab 200K\tab 1/64/128/256\tab\tab 22.45M\tab\tab 30.29 s\tab\tab 56.95 ms\tab x 531.8\par
\tab\tab\tab\par
\b\fs22 __________________________________________________________________\b0\f0\lang1049\par
\par
\b\f1\fs26\lang1033 ABOUT\b0\f0\fs22\lang1049\par
\par
\par
\f1\lang1033\tab 31 Mar 2021\par
\par
\tab ( c ) by digi_cs 2021\f0\lang1049\par
\f1\lang1033\par
\b __________________________________________________________________\b0\par
\par
\f0\lang1049\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
}
 