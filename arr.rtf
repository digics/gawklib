{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset204 Courier New;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sl240\slmult1\qj\f0\fs22\lang1033 l;;\f1\lang1049\par
\par
\f0\lang1033\par
\b\i\fs48 arr\b0\i0  \i\fs32 v2.5\par
\i0\fs22\tab\tab\tab\tab\tab\tab    \tab\tab\tab      \i by digi 2020\i0\par
\tab\tab\tab\par
\b __________________________________________________________________\par
\b0\f1\lang1049\par
\b\f0\fs26\lang1033 INTRODUCTION\b0\f1\fs22\lang1049\par
\f0\lang1033\par
\tab the \b arr\b0  module is the part of the \b env\b0 -package.\par
\par
\tab please see also \b env\b0 -package documentation (\i env.rtf\i0 )\par
\par
\tab\b module objective\b0 :\par
\par
\tab\tab low / high level array manipulations\par
\par
\tab\b total resources\b0 :\par
\par
\tab\tab 19 functions for (sub)arrays manipulations:\par
\par
\tab\tab\tab - arrays joining to string\par
\tab\tab\tab - ?\par
\tab\tab\tab - other useful functions\par
\par
\tab\tab ? global arrays:\par
\par
\tab\tab ? globvars:\par
\b __________________________________________________________________\b0\f1\lang1049\par
\par
\b\f0\fs26\lang1033 REQUIREMENTs\b0\f1\fs22\lang1049\par
\par
\f0\lang1033\tab - gawk version 4.1.4+ ?\par
\par
\tab - using in \b _env\b0\par
\b\par
__________________________________________________________________\b0\f1\lang1049\par
\par
\b\f0\fs26\lang1033 RESOURCEs\b0\f1\fs22\lang1049\par
\par
\f0\lang1033\tab LOW LEVEL RESOURCES::\f1\lang1049\par
\par
\f0\lang1033\tab\b reta\b0 ()\tab\tab - return elements of the array as the single string\par
\tab\b retas\b0 ()\tab\tab - return elements of the array with separator\par
\tab\b retab\b0 ()\tab\tab - return element-pairs of two arrays\par
\par
\tab\b _mova\b0 ()\tab\tab - copy all indexes from source array to dest. array\par
\tab\b _moviav\b0 ()\tab\tab - copy given parameter at index in array\par
\tab\b _moviaa\b0 ()\tab\tab - copy given index from source array to dest. array\par
\tab\b _moviai\b0 ()\tab\tab - copy one index to another in the same array\par
\tab\b _moviaia\b0 ()\tab\tab - copy array[ index ] to another array[ index ]\par
\par
\i\fs18\tab\tab\tab\tab the \b _mov\b0 -family functions always deletes an existing subarray even if \tab\tab\tab\tab it's required to be an subarray. \b _mov\b0 -family functions are always \tab\tab\tab\tab\tab creates clear subarrays containing no indexes. this behaviour is \tab\tab\tab\tab\tab differ from the behaviour of \b _add\b0 -family functions listed below:\i0\fs22\par
\par
\tab\b _adda\b0 ()\tab\tab - copy-add all indexes from source array to dest. array\par
\tab\b _addiav\b0 ()\tab\tab - copy-add given parameter at index in array\par
\tab\b _addiaa\b0 ()\tab\tab - copy-add given index from source array to dest. array\par
\tab\b _addiai\b0 ()\tab\tab - copy-add one index to another in the same array\par
\tab\b _addiaia\b0 ()\tab\tab - copy-add array[ index ] to another array[ index ]\par
\par
\i\fs18\tab\tab\tab\tab the \b _add\b0 -family functions never deletes an existing subarray if it's \tab\tab\tab\tab required to be an subarray. this behaviour is differ from the \tab\tab\tab\tab\tab behaviour of the \b _mov\b0 -family functions listed above.\i0\fs22\par
\par
\tab\b _defa\b0 ()\tab\tab - define new clear array at array[ index ]. return index.\par
\tab\b _leta\b0 ()\tab\tab - define an subarray at array[ index ]. return index.\par
\par
\tab\b _nama\b0 ()\tab\tab - return syntax name of the given global (sub)array\par
\tab\b _sama\b0 ()\tab\tab - detects that two arrays is the same array\par
\par
\tab\b dumpa\b0 ()\tab\tab - dumping content of the given array\par
\par
\tab\b _sortedin\b0 ()\tab - control \b PROCINFO\b0 [ "\i sorted_in\i0 " ]\f1\lang1049\par
\par
\f0\lang1033\tab the detailed reference of the module resources is below.\f1\lang1049\par
\b\f0\lang1033 __________________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 reta\b0 ( \i A\i0 , \i s\i0 , \i l\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab function return sequential numeric indexed elements of array `\i A\i0  as the \tab single string. parameter `\i s\i0  is determinating start numeric index while \tab parameter `\i l\i0  determinates the number of elements returned:\par
\par
\tab\tab\b reta\b0 ( \i A\i0 , \i 2\i0 , \i 3\i0  )\par
\par
\tab\tab is equivalent with: \i A\i0 [ 2 ] \i A\i0 [ 3 ] \i A\i0 [ 4 ]\par
\par
\tab parameter `\i s\i0  may be omitted ( == "" ) in this case the start index will \tab be determinated automatically and will equal 0 or 1 - depending from if \tab index \i 0\i0  is exist in array `\i A\i0 :\par
\par
\tab\tab `\i s\i0  = ! ( 0 in `\i A\i0  )\par
\par
\tab parameter `\i l\i0  may be omitted ( == "" ) in this case the number of returned \tab elements will be determinated automatically targeting for returning the \tab rest of numeric \tab indexes of the array `\i A\i0  starting from determinated start \tab numeric index until the last one. it is calculated by the followed:\par
\par
\tab\tab `\i l\i0  = length( `\i A\i0  ) - `\i s\i0  + ! ( 0 in `\i A\i0  )\par
\par
\fs20\tab\tab example:\par
\par
\tab\tab\tab t = "ABCDEF"\par
\tab\tab\tab split( t, T, "" )\par
\tab\tab\tab t = \b reta\b0 ( T )\par
\tab\tab\tab print t\par
\par
\tab\tab output:\par
\par
\tab\tab\tab ABCDEF\par
\fs22\par
\tab WARNING! the autodetection of `s and `\i l\i0  is based on the assumption that \tab there are no other elements in the array `\i A\i0  except with a numeric \tab indexs, and that the numeric indexing starts from 0 or 1, and there are \tab all indexes that increase sequentially by 1.\par
\par
\tab if you're not sure that all of this conditions are satisfied then please \tab specify `\i s\i0  and `\i l\i0  as not by default.\par
\par
\tab function operates using \b AIR\b0  ( Array Index Reducing ) joining method. it's \tab provide excellent performance with at the same time more higher memory \tab requirements than the other methods (see \b AIR\b0 -method).\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 retas\b0 ( \i A\i0 , \i sep\i0 , \i s\i0 , \i l\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab return numeric indexed elements of the array `\i A\i0  separated by the string \tab in `\i sep\i0 .\par
\par
\tab parameter `\i s\i0  may be omitted ( == "" ) in this case start index will be \tab determinated automatically and will equal 0 or 1 - depending from if \tab index \i 0\i0  is exist in array `\i A\i0 :\par
\par
\tab\tab `\i s\i0  = ! ( 0 in `\i A\i0  )\par
\par
\tab parameter `\i l\i0  may be omitted ( == "" ) in this case the number of returned \tab elements will be determinated automatically targeting for returning the \tab rest of numeric \tab indexes of the array `\i A\i0  starting from determinated start \tab numeric index until the last one. it is calculated by the followed:\par
\par
\tab\tab `\i l\i0  = length( `\i A\i0  ) - `\i s\i0  + ! ( 0 in `\i A\i0  )\par
\par
\par
\fs20\tab\tab example:\par
\par
\tab\tab\tab t = "ABCDEF"\par
\par
\tab\tab\tab split( t, T, "" )\par
\par
\tab\tab\tab t = \b retas\b0 ( T, "-" )\par
\par
\tab\tab\tab print t\par
\par
\tab\tab output:\par
\par
\tab\tab\tab A-B-C-D-E-F\par
\b\fs22\par
\b0\tab WARNING! the autodetection of `s and `\i l\i0  is based on the assumption that \tab there are no other elements in the array `\i A\i0  except with a numeric \tab indexs, that the numeric indexing starts from 0 or 1, and there are all \tab indexes that increase sequentially by 1.\par
\par
\tab if you're not sure that all of this conditions are satisfied then please \tab specify `\i s\i0  and `\i l\i0  as not by default.\par
\b\par
\b0\tab function operates using \b AIR\b0  ( Array Index Reducing ) joining method. it's \tab provide excellent performance with at the same time more higher memory \tab requirements than the other methods (see \b AIR\b0 -method).\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 retab\b0 ( \i A\i0 , \i B\i0 , \i sa\i0 , \i l\i0 , \i sb\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab return the number of pairs of the incremental numeric indexed elements of \tab the array `\i A\i0  and `\i B\i0 .\par
\par
\tab function specially designed as the opposite of split/patsplit functions \tab performing with the two arrays (4th parameter of split/patsplit).\par
\par
\tab parameter `\i sa\i0  determinates array's `\i A\i0  start numeric index.\par
\par
\tab if parameter `\i sa\i0  is omitted ( == "" ) then start index will be \tab determinated automatically and will equal 0 or 1 - depending from if \tab index \i 0\i0  is exist in array `\i A\i0 :\par
\par
\tab\tab `\i sa\i0  = ! ( 0 in `\i A\i0  )\par
\par
\tab parameter `\i sb\i0  determinates array's `\i B\i0  start numeric index.\par
\tab if parameter `\i sb\i0  is omitted ( == "" ) then start index will be \tab determinated automatically and will equal 0 or 1 - depending from if \tab index \i 0\i0  is exist in array `\i B\i0 :\par
\par
\tab\tab `\i sb\i0  = ! ( 0 in `\i B\i0  )\par
\par
\tab parameter `l determinates the number of pairs.\par
\tab parameter `\i l\i0  may be omitted ( == "" ) in this case the number of returned \tab elements will be determinated automatically targeting for returning the \tab rest of numeric \tab indexes of the array `\i A\i0  starting from determinated start \tab numeric index until the last one. it is calculated by the followed:\par
\par
\tab\tab `\i l\i0  = length( `\i A\i0  ) - `\i s\i0  + ! ( 0 in `\i A\i0  )\par
\par
\tab the autodetection of `\i sa\i0 , `\i sb\i0  and `\i l\i0  have the special case if both `\i sa\i0  \tab and `\i sb\i0  are autodetected then:\par
\par
\tab\tab if `sb autodetected as 0 ( 0 in `B ) and `sa autodetected as 1 ( ! \tab\tab ( 0 in `A ) ) - typical patsplit() situation: then `sa = `sb; `l++\par
\par
\fs20\tab\tab example:\par
\par
\tab\tab\tab t = "A-B-C-D-E-F"\par
\par
\tab\tab\tab patsplit( t, A, /-/, B )\par
\par
\tab\tab\tab t = \b retab\b0 ( A, B )\par
\par
\tab\tab\tab print t\par
\par
\tab\tab output:\par
\par
\tab\tab\tab A-B-C-D-E-F\par
\fs22\par
\tab WARNING! the autodetection of `\i sa\i0 , `\i sb\i0  and `\i l\i0  is based on the assumption \tab that \tab there are no other elements in the array `\i A\i0  and `\i B\i0  except with a \tab numeric indexs, and that the numeric indexing starts from 0 or 1, and \tab there are all indexes present that increase sequentially by 1.\par
\par
\tab if you're not sure that all of this conditions are satisfied then please \tab specify `\i s\i0  and `\i l\i0  as not by default.\par
\par
\tab function operates using \b AIR\b0  ( Array Index Reducing ) joining method. it's \tab provide excellent performance with at the same time more higher memory \tab requirements than the other methods (see \b AIR\b0 -method).\par
\b __________________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _mova\b0 ( \i D\i0 , \i S\i0  )\fs22\par
\par
\tab copy all elements in array `\i S\i0  to array `\i D\i0 .\par
\par
\tab if copying indexes from array `\i S\i0  is already exist in array `\i D\i0  then it's \tab will be deleted and then redefined as depending from the type of the \tab copied element from array `\i S\i0 .\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _moviav\b0 ( \i d\i0 , \i D\i0 , \i Vv\i0  )\fs22\par
\par
\tab copy value `\i Vv\i0  (array or string) to `\i D\i0 [ `\i d\i0  ].\par
\par
\tab if element `\i d\i0  is already defined in array `\i D\i0  then it's will be deleted \tab and then redefined as depending from the type of `\i Vv\i0 .\par
\par
\tab if `\i Vv\i0  is untyped then element `\i d\i0  in array `\i D\i0  will be deleted.\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _moviaa\b0 ( \i ds\i0 , \i D\i0 , \i S\i0  )\fs22\par
\par
\tab copy index `\i ds\i0  from array `S to array `\i D\i0 .\par
\par
\tab if element `\i ds\i0  is already defined in array `\i D\i0  then it's will be deleted \tab and then redefined as depending from existance and type of element `\i ds\i0  in \tab array `\i S\i0 .\par
\par
\tab if `\i ds\i0  is not exist in array `\i S\i0  then element `\i ds\i0  in array `\i D\i0  will be \tab deleted.\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _moviai\b0 ( \i d\i0 , \i DS\i0 , \i s\i0  )\fs22\par
\tab\par
\tab copy one index to another into the same array: `D\i S\i0 [ `\i s\i0  ] to `\i DS\i0 [ `\i d\i0  ].\par
\par
\tab if element `\i d\i0  is already defined in array `\i D\i0  then it's will be deleted \tab and then redefined as depending from existance and type of element `\i s\i0  in \tab array `\i DS\i0 .\par
\par
\tab if `\i s\i0  is not exist in array `\i DS\i0  then element `\i d\i0  in array `\i DS\i0  will be \tab deleted.\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _moviaia\b0 ( \i d\i0 , \i D\i0 , \i s\i0 , \i S\i0  )\fs22\par
\par
\tab copy element `\i S\i0 [ `\i s\i0  ] to `\i D\i0 [ `\i d\i0  ].\par
\par
\tab if array `S do not contain element `s then index `d will be deleted in \tab array `D\par
\par
\tab if element `\i d\i0  is already defined in array `\i D\i0  then it's will be deleted \tab and then redefined as depending from existance and type of element `\i s\i0  in \tab array `\i S\i0 .\par
\par
\tab if `\i s\i0  is not exist in array `\i S\i0  then element `\i d\i0  in array `\i D\i0  will be \tab deleted.\par
\b __________________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _adda\b0 ( \i D\i0 , \i S\i0  )\fs22\par
\par
\tab if `\i D\i0  and `\i S\i0  are the same array then return immediately.\par
\par
\tab copy all elements in array `\i S\i0  to array `\i D\i0 .\par
\par
\tab if type of the copied element from array `S is an array and element with \tab the same index in array `\i D\i0  is already defined as subarray then it's will \tab be extended by the elements from array `\i S\i0  - it's will \b NOT\b0  been cleared \tab before start copying elements from array `\i S\i0 .\par
\par
\tab however - destination array `\i D\i0  will not been cleared.\par
\b ____________________________________________________________\b0\par
\tab\par
\b\fs26 _addiav\b0 ( \i d\i0 , \i D\i0 , \i Vv\i0  )\fs22\par
\par
\tab copy `\i Vv\i0  (array/string) to `\i D\i0 [ `\i d\i0  ].\par
\par
\tab if type of `\i Vv\i0  is an array and element `\i d\i0  in array `\i D\i0  is already defined \tab as subarray then it's will be extended by the elements from `\i Vv\i0  - it's \tab will \b NOT\b0  been cleared before start copying elements from array `\i Vv\i0 .\par
\par
\tab if `\i Vv\i0  is untyped then element `\i d\i0  in array `\i S\i0  will be deleted.\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _addiaa\b0 ( \i ds\i0 , \i D\i0 , \i S\i0  )\fs22\par
\par
\tab copy `\i S\i0 [ `\i ds\i0  ] to `\i D\i0 [ `\i ds\i0  ].\par
\par
\tab if type of `\i S\i0 [ `\i ds\i0  ] is an array and element `\i ds\i0  in array `\i D\i0  is already \tab defined as subarray then it's will be extended by the elements from \tab `\i S\i0 [ `\i ds\i0  ] - it's will \b NOT\b0  been cleared before start copying elements from \tab array `\i S\i0 [ `\i ds\i0  ].\par
\par
\tab if `\i ds\i0  is not exist in array `\i S\i0  then element `\i ds\i0  in array `\i S\i0  will be \tab deleted.\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _addiai\b0 ( \i d\i0 , \i DS\i0 , \i s\i0  )\fs22\par
\par
\tab copy `\i DS\i0 [ `\i s\i0  ] to `\i DS\i0 [ `\i d\i0  ].\par
\par
\tab if type of `\i DS\i0 [ `\i s\i0  ] is an array and element `\i d\i0  in array `\i DS\i0  is already \tab defined as subarray then it's will be extended by the elements from \tab `\i DS\i0 [ `\i s\i0  ] - it's will \b NOT\b0  been cleared before start copying elements from \tab array `\i DS\i0 [ `\i s\i0  ].\par
\par
\tab if `\i s\i0  is not exist in array `\i DS\i0  then element `\i d\i0  in array `\i DS\i0  will be \tab deleted.\par
\b ____________________________________________________________\b0\par
\par
\b\fs26 _addiaia\b0 ( \i d\i0 , \i D\i0 , \i s\i0 , \i S\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab copy `\i S\i0 [ `\i s\i0  ] to `\i D\i0 [ `\i d\i0  ].\par
\par
\tab if type of `\i S\i0 [ `\i s\i0  ] is an array and element `\i d\i0  in array `\i D\i0  is already \tab defined as subarray then it's will be extended by the elements from \tab `\i S\i0 [ `\i s\i0  ] - it's will \b NOT\b0  been cleared before start copying elements from \tab array `\i S\i0 [ `\i s\i0  ].\par
\par
\tab if `\i s\i0  is not exist in array `\i S\i0  then element `\i d\i0  in array `\i D\i0  will be \tab deleted.\par
\b __________________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _defa\b0 ( \i i\i0 , \i A\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab define clear subarray at `\i A\i0 [ `\i i\i0  ].\par
\par
\tab if index `\i i\i0  exist in array `\i A\i0  then it's will be deleted and then \tab redefined as an subarray.\par
\par
\tab return index `\i i\i0 .\par
\par
\fs18\tab\tab example:\par
\par
\tab\tab\tab # create empty subarray at \i A\i0 [ "\i abc\i0 " ] and providing it as the second \tab\tab\tab\tab # parameter of split():\par
\par
\tab\tab\tab split( ..., \i A\i0 [ \b _defa\b0 ( "\i abc\i0 ", \i A\i0  ) ], ...\par
\b\fs22 ____________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _leta\b0 ( \i i\i0 , \i A\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab define subarray at `\i A\i0 [ `\i i\i0  ] if it's not already defined.\par
\par
\tab if index `\i i\i0  exist in array `\i A\i0  and it's not an subarray then `\i A\i0 [ `\i i\i0  ] will \tab be deleted and redefined as an array.\par
\par
\tab if index `\i i\i0  exist in array `\i A\i0  and it's an subarray then no actions will \tab be performed\par
\par
\tab return index `\i i\i0 .\par
\par
\fs18\tab\tab example:\par
\par
\tab\tab\tab # create subarray at \i A\i0 [ "\i abc\i0 " ] with no data loss in case if its already \tab\tab\tab\tab # defined as an subarray:\par
\par
\tab\tab\tab split( ..., \i A\i0 [ \b _leta\b0 ( "\i abc\i0 ", \i A\i0  ) ], ...\par
\b\fs22 __________________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _nama\b0 ( \i A\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab function try to detect array's `\i A\i0  syntax name in case if `\i A\i0  is the chield \tab of the \b SYMTAB\b0  array.\par
\par
\tab if \b _nama\b0 () is unable to detect the name of the array `A (in case if it's \tab a local array) then \b _nama\b0 () returns \b null\b0 .\par
\par
\fs18\tab\tab example:\par
\par
\tab\tab\tab # printing the array's syntax name\par
\par
\tab\tab\tab\i ArrayName\i0 [ "abc" ][ "" ]\par
\par
\tab\tab\tab print \b _nama\b0 ( \i ArrayName\i0  )\par
\par
\tab\tab output:\par
\par
\tab\tab\tab ArrayName\par
\b\fs22 ____________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _sama\b0 ( \i A\i0 , \i B\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab function detects that if array `\i A\i0  and array `\i B\i0  are the same array or not.\par
\tab it's and return true in case if arrays `\i A\i0  and `\i B\i0  are the same array.\par
\b ____________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 dumpa\b0 ( \i A\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab function return text form of dumping array `\i A\i0 .\par
\par
\tab the following illustrates dump output form:\par
\par

\pard\li720\sl240\slmult1\qj\fs20\tab example:\par
\par
\tab\tab D[ "a" ]\tab\tab\tab\tab\tab\tab\tab  # null value\par
\tab\tab delete D[ "b" ][ D[ "b" ][ "" ] ]\tab\tab\tab  # empty subarray\par
\tab\tab D[ "c" ] = ""\tab\tab\tab\tab\tab\tab  # empty string\par
\tab\tab D[ "d" ] = "D"\tab\tab\tab\tab\tab\tab  # string\par
\tab\tab D[ "e" ][ "e1" ]\tab\tab\tab\tab\tab\tab  # non-empty subarray\par
\tab\tab delete D[ "e" ][ "e2" ][ D[ "e" ][ "e2" ][ "" ] ]\par
\tab\tab D[ "e" ][ "e3" ] = ""\par
\tab\tab D[ "e" ][ "e4" ] = "E"\par
\par
\tab\tab print \b dumpa\b0 ( D )\par
\par
\tab output:\par
\par
\tab\tab [ a ] = -\tab\tab\tab\tab\tab\tab\tab  # null value\par

\pard\li2160\sl240\slmult1\qj [ b ]\tab\tab\tab\tab\tab\tab\tab\tab  # empty subarray\par
[ c ] = '\tab\tab\tab\tab\tab\tab\tab  # empty string\par

\pard\li720\sl240\slmult1\qj\tab\tab [ d ] = D\tab\tab\tab\tab\tab\tab\tab  # string\par
\tab\tab [ e ][ e1 ] = -\tab\tab\tab\tab\tab\tab  # non-empty subarray\par

\pard\li2160\sl240\slmult1\qj      [ e2 ]\par
     [ e3 ] = '\par
     [ e4 ] = E\par

\pard\sl240\slmult1\qj\fs22\par
\tab string values outputs in direct form (i.e. without brackets) except if \tab value string contains blank character(s) at the end. in this case the \tab character "'" will be added as the last character of the data field.\par
\par
\tab note that character "'" is also output in case if data value equals to \tab empty string\par
\par
\tab note that character '-' at the data field shows null (unassigned) value\par
\par
\tab note that index in square brackets that is not followed by the character \tab '=' - means empty subarray\par
\par
\tab note that data field may be multilined.\par
\par
\tab list-arrays have special output form. first dumping only items from list \tab in forward direction. then all other array's indexes dumped. the subarray \tab array[ LIST ] is completely hided in array dump.\par
\b ____________________________________________________________\b0\par
\f1\lang1049\par
\b\f0\fs26\lang1033 _sortedin\b0 ( \i v\i0  )\fs22\par
\f1\lang1049\par
\f0\lang1033\tab function return current value of \b PROCINFO\b0 [ "\i sorted_in\i0 " ].\par
\par
\tab function setup new value `\i v\i0  for \b PROCINFO\b0 [ "\i sorted_in\i0 " ].\par
\b __________________________________________________________________\b0\par
\par
\b\fs26 AIR\b0 -method\f1\fs22\lang1049\par
\par
\par
\b\f0\lang1033 AIR\b0  ( Array Index Reducing ) joining method. it's provide excellent performance with at the same time more higher memory requirements than the other methods.\par
\par
the air-method have one clue value\f1\lang1049  embedded in the code - \f0\lang1033 the reduce factor \par
\par
for explanation of the air-method - let's suppose that reduce factor is equal to 2 and we just take a look on the array's elements joyning together:\par
\par
let we have an array A containing 16 elements with numeric indexes in range: 1-16. each element contains single character: the hexadecimal number in range: [0-9A-F].\par
\par
\par
\par
air-performs some ind of the data ping-pong between two arrays:\par
\par
\tab source: array A ( 16 elements )\par
\tab copy indexes from source to array: be series of \par
\tab destination: array B\par
\par
\par
\par
this mean that the source code of arr-module have the following resources:\par
\par
\par
\par
in short words method is in:\par
\par
\tab method\par
\par
\par
\tab copy each 128 incremental numeric indexed elements of array A to single \tab element in array B with also incremental numeric indexed element. copy \tab all indexes by such way\par
\par
\tab array A is cleared and array A and B swapped and operation repeats with \tab the arrays A and B swapped. this will remains until the number of indexes \tab is reduced to 1 that's returned.\par
\par
\tab this data ping-pong between two arrays provides great performance while \tab testing y67rt\par
\par
let's view on the details of air process.\par
\par
lets suppose \par
\par
\par
\b __________________________________________________________________\b0\par
\par
\b\fs26 strarr\b0 -format description\f1\fs22\lang1049\par
\f0\lang1033\par
\tab strarr-format is designed for user-to-string-to-array concersions.\par
\par
\tab strrr-format targeting to be an human-friendly form of source.\par
\par
\par
altescape support:\par
\par
\tab the alternative escape character '\'b7' ( \\xB7 ) tells to \b strarr\b0 -processor \tab that the following any characeter is the data character - not one of the \tab control characters that are described below.\par
\par
\tab for example if user wants to implement value that is containing characet\par
\par
note that all spacers at the begining and ending strarr-string will be disappeared\par
\par
strarr-format\f1\lang1049  \f0\lang1033 is an typical form of listing containing item record(s) separated by the character ',' (\\x2C). note that all spacers around character ',' will be disappeared except in case if it's alt-escaped.\par
\par
each item record may have two forms:\par
\par
\tab 1) name1, name2, name3, ....\par
\par
\tab\tab implements items `name with no value(s) assigned\par
\par
\tab 2) name1 = name2 = name3 = ... = value\par
\par
\tab\tab implements item(s) `name and it's `value\par
\par
\f1\lang1049 the presence of the \f0\lang1033 not-altescaped character \f1\lang1049 "\f0\lang1033 =\f1\lang1049 "\f0\lang1033  inside the item record will determinates what form of item record we have\par
\par
the implementation below will be point to view on the second form of item record.\par
\par
\par
the `name may be any string containing any characters except characters: [,=] that are should be altescaped in case if user wants to make it as the part of the `name. note that all spacers around the `name will be disappeared. this is except altescaped spacers.\f1\lang1049\par
\par
\f0\lang1033 the `name may be present multiple times\par
\par
the `value is like the `name but with the some additions. it's may be an any string containing any characters except: [,=\\[\\]]. it is also loose it's spacers arounding it and it is also support alternative escape characater.\par
\par
\par
\par
 \par
\f1\lang1049\par
\f0\lang1033\par
\par
\par
\par
\tab\par
\par
\par
\tab the what exacctly knows what form have item record\par
\par
\tab everywhere in whole strarr-string the combination of character \\xB7 \tab ( '\'b7' ) followed by the ANY character will be considered as the exact \tab followed character - i.e. it' will be considered as the data == characetr\par
\par
\par
\tab it is internally used by many _env-functions\par
\par
\par
\par
\par
$globvar\tab read globvar and replace $globvar by its content\par
\par
DEFAULT = "c"\par
\par
defa( A, " a = $DEFAULT, $DEFAULT = b " )\par
\par
print DEFAULT "'"\par
\par
print _dumpa( A )\par
\par
'\par
A[ a ] = c\tab\tab\tab # the content of globvar `DEFAULT is the value\par
 [ c ] = b\tab\tab\tab #  the content of globvar `DEFAULT is the index\par
\par
\par
\par
\b __________________________________________________________________\par
\b0\par
\b\fs26 TODO\b0\fs22\par
\par
\tab dumpa()\par
\par

\pard\li720\sl240\slmult1\qj\tab # output empty index ("") as: [ ] - not as: [  ] ( or even as: [] )\par
\par
\tab # implement multilined index\par
\par
\tab # hids and pointers recognition in data and index\par
\par
\tab # limit index width (also: total width)\par
\par
\tab # ts not implemented\par

\pard\sl240\slmult1\qj\b __________________________________________________________________\par
\b0\par
\b\fs26 CHANGELOG\b0\fs22\par
\par
\tab 2020.11.18\par
\par
\tab\tab\b dumpa\b0 ()\par
\par
\tab\tab added feature of special output for list arrays ( containing index \tab\tab LIST ). the array outputs list items first and after that all other \tab\tab indexes. subarray LIST dump isn't present in output.\par
\par
\par
\b __________________________________________________________________\b0\f1\lang1049\par
\par
\b\f0\fs26\lang1033 THERMS\b0\f1\fs22\lang1049\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
}
 